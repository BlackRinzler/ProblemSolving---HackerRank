# ===================================
#   Problem statement & information
# ===================================

# A student is taking a cryptography class and has found anagrams to be very useful. Two strings are anagrams of each other if the first string's letters can be rearranged to form the second string. 
# In other words, both strings must contain the same exact letters in the same exact frequency. For example, bacdc and dcbac are anagrams, but bacdc and dcbad are not.
# The student decides on an encryption scheme that involves two large strings. The encryption is dependent on the minimum number of character deletions required to make the two strings anagrams. 
# Determine this number. Given two strings, a and b, that may or may not be of the same length, determine the minimum number of character deletions required to make a and b anagrams. 
# Any characters can be deleted from either of the strings.

# Difficulty: Easy
# Max Score: 25
# Language: Python

# ===================================
#             Solutions
# ===================================

#!/bin/python3

import os

def makeAnagram(a, b):
    a_dict = {}
    num = 0
    for char in a:
        a_dict[char] = a_dict.get(char, 0) + 1
    for char in b:
        if char in a_dict and a_dict[char] > 0:
            a_dict[char] -= 1
        else:
            num += 1
    return num + sum(a_dict.values())
            
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    a = input()

    b = input()

    res = makeAnagram(a, b)

    fptr.write(str(res) + '\n')

    fptr.close()
